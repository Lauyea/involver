// <auto-generated />
using System;
using DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250815060658_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ArticleArticleTag", b =>
                {
                    b.Property<int>("ArticleTagsTagId")
                        .HasColumnType("int");

                    b.Property<int>("ArticlesArticleID")
                        .HasColumnType("int");

                    b.HasKey("ArticleTagsTagId", "ArticlesArticleID");

                    b.HasIndex("ArticlesArticleID");

                    b.ToTable("ArticleArticleTag");
                });

            modelBuilder.Entity("ArticleViewIp", b =>
                {
                    b.Property<int>("ArticlesArticleID")
                        .HasColumnType("int");

                    b.Property<int>("ViewIpsId")
                        .HasColumnType("int");

                    b.HasKey("ArticlesArticleID", "ViewIpsId");

                    b.HasIndex("ViewIpsId");

                    b.ToTable("ArticleViewIp");
                });

            modelBuilder.Entity("DataAccess.Data.InvolverUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("BankAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Banned")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("Prime")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.AchievementModel.Achievement", b =>
                {
                    b.Property<int>("AchievementID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AchievementID"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Content")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("AchievementID");

                    b.ToTable("Achievements", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.AchievementModel.ProfileAchievement", b =>
                {
                    b.Property<string>("ProfileID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AchievementID")
                        .HasColumnType("int");

                    b.Property<DateTime>("AchieveDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int");

                    b.HasKey("ProfileID", "AchievementID");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("ProfileID", "AchievementID"), false);

                    b.HasIndex("AchievementID");

                    b.HasIndex("SeqNo")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("SeqNo"));

                    b.ToTable("ProfileAchievement");
                });

            modelBuilder.Entity("DataAccess.Models.Agree", b =>
                {
                    b.Property<int>("AgreeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AgreeID"));

                    b.Property<int?>("CommentID")
                        .HasColumnType("int");

                    b.Property<int?>("MessageID")
                        .HasColumnType("int");

                    b.Property<string>("ProfileID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("AgreeID");

                    b.HasIndex("CommentID");

                    b.HasIndex("MessageID");

                    b.HasIndex("ProfileID");

                    b.ToTable("Agree", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.AnnouncementModel.Announcement", b =>
                {
                    b.Property<int>("AnnouncementID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnnouncementID"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(65536)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Views")
                        .HasColumnType("int");

                    b.HasKey("AnnouncementID");

                    b.ToTable("Announcement", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.ArticleModel.Article", b =>
                {
                    b.Property<int>("ArticleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArticleID"));

                    b.Property<bool>("Block")
                        .HasColumnType("bit");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(65536)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("DailyView")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<decimal>("MonthlyCoins")
                        .HasColumnType("money");

                    b.Property<string>("ProfileID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("TotalCoins")
                        .HasColumnType("money");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ViewRecordJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Views")
                        .HasColumnType("int");

                    b.HasKey("ArticleID");

                    b.HasIndex("ProfileID");

                    b.ToTable("Article", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.ArticleModel.ArticleTag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("TagId");

                    b.ToTable("ArticleTags", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.ArticleModel.ArticleViewer", b =>
                {
                    b.Property<string>("ProfileID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ArticleID")
                        .HasColumnType("int");

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int");

                    b.Property<DateTime>("ViewDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("ProfileID", "ArticleID");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("ProfileID", "ArticleID"), false);

                    b.HasIndex("ArticleID");

                    b.HasIndex("SeqNo")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("SeqNo"));

                    b.ToTable("ArticleViewer");
                });

            modelBuilder.Entity("DataAccess.Models.Comment", b =>
                {
                    b.Property<int>("CommentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentID"));

                    b.Property<int?>("AnnouncementID")
                        .HasColumnType("int");

                    b.Property<int?>("ArticleID")
                        .HasColumnType("int");

                    b.Property<bool>("Block")
                        .HasColumnType("bit");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(16384)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EpisodeID")
                        .HasColumnType("int");

                    b.Property<int?>("FeedbackID")
                        .HasColumnType("int");

                    b.Property<int?>("NovelID")
                        .HasColumnType("int");

                    b.Property<string>("ProfileID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("CommentID");

                    b.HasIndex("AnnouncementID");

                    b.HasIndex("ArticleID");

                    b.HasIndex("EpisodeID");

                    b.HasIndex("FeedbackID");

                    b.HasIndex("NovelID");

                    b.HasIndex("ProfileID");

                    b.ToTable("Comment", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.FeedbackModel.Feedback", b =>
                {
                    b.Property<int>("FeedbackID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackID"));

                    b.Property<bool>("Accept")
                        .HasColumnType("bit");

                    b.Property<bool>("Block")
                        .HasColumnType("bit");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(65536)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("FeedbackID");

                    b.ToTable("Feedback", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.Follow", b =>
                {
                    b.Property<int>("FollowID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FollowID"));

                    b.Property<string>("FollowerID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("NovelID")
                        .HasColumnType("int");

                    b.Property<bool>("NovelMonthlyInvolver")
                        .HasColumnType("bit");

                    b.Property<string>("ProfileID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("ProfileMonthlyInvolver")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("FollowID");

                    b.HasIndex("FollowerID");

                    b.HasIndex("NovelID");

                    b.HasIndex("ProfileID");

                    b.ToTable("Follow", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.Involving", b =>
                {
                    b.Property<int>("InvolvingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvolvingID"));

                    b.Property<int?>("ArticleID")
                        .HasColumnType("int");

                    b.Property<string>("InvolverID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("LastTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("MonthlyValue")
                        .HasColumnType("money");

                    b.Property<int?>("NovelID")
                        .HasColumnType("int");

                    b.Property<string>("ProfileID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("TotalValue")
                        .HasColumnType("money");

                    b.Property<decimal>("Value")
                        .HasColumnType("money");

                    b.HasKey("InvolvingID");

                    b.HasIndex("ArticleID");

                    b.HasIndex("InvolverID");

                    b.HasIndex("NovelID");

                    b.HasIndex("ProfileID");

                    b.ToTable("Involving", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.Message", b =>
                {
                    b.Property<int>("MessageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageID"));

                    b.Property<bool>("Block")
                        .HasColumnType("bit");

                    b.Property<int>("CommentID")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("ProfileID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("MessageID");

                    b.HasIndex("CommentID");

                    b.HasIndex("ProfileID");

                    b.ToTable("Message", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.Missions", b =>
                {
                    b.Property<int>("MissionsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MissionsID"));

                    b.Property<bool>("BeAgreed")
                        .HasColumnType("bit");

                    b.Property<bool>("CompleteOtherMissions")
                        .HasColumnType("bit");

                    b.Property<bool>("DailyLogin")
                        .HasColumnType("bit");

                    b.Property<bool>("LeaveComment")
                        .HasColumnType("bit");

                    b.Property<string>("ProfileID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("ShareCreation")
                        .HasColumnType("bit");

                    b.Property<bool>("ViewAnnouncement")
                        .HasColumnType("bit");

                    b.Property<bool>("Vote")
                        .HasColumnType("bit");

                    b.Property<bool>("WatchArticle")
                        .HasColumnType("bit");

                    b.HasKey("MissionsID");

                    b.HasIndex("ProfileID")
                        .IsUnique();

                    b.ToTable("Missions", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("ProfileID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("ProfileID");

                    b.ToTable("Notifications", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.NovelModel.BiddingOption", b =>
                {
                    b.Property<int>("BiddingOptionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BiddingOptionID"));

                    b.Property<decimal>("BiddingCoins")
                        .HasColumnType("money");

                    b.Property<string>("Content")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("OwnerID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalCoins")
                        .HasColumnType("money");

                    b.Property<int>("VotingID")
                        .HasColumnType("int");

                    b.HasKey("BiddingOptionID");

                    b.HasIndex("VotingID");

                    b.ToTable("BiddingOption", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.NovelModel.Dice", b =>
                {
                    b.Property<int>("DiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiceID"));

                    b.Property<int>("CommentID")
                        .HasColumnType("int");

                    b.Property<int>("Sides")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("DiceID");

                    b.HasIndex("CommentID");

                    b.ToTable("Dice", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.NovelModel.Episode", b =>
                {
                    b.Property<int>("EpisodeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EpisodeID"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(65536)
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasVoting")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLast")
                        .HasColumnType("bit");

                    b.Property<int>("NovelID")
                        .HasColumnType("int");

                    b.Property<string>("OwnerID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Views")
                        .HasColumnType("int");

                    b.HasKey("EpisodeID");

                    b.HasIndex("NovelID");

                    b.ToTable("Episode", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.NovelModel.NormalOption", b =>
                {
                    b.Property<int>("NormalOptionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NormalOptionID"));

                    b.Property<string>("Content")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("OwnerID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalCoins")
                        .HasColumnType("money");

                    b.Property<int>("VotingID")
                        .HasColumnType("int");

                    b.HasKey("NormalOptionID");

                    b.HasIndex("VotingID");

                    b.ToTable("NormalOption", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.NovelModel.Novel", b =>
                {
                    b.Property<int>("NovelID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NovelID"));

                    b.Property<bool>("Block")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DailyView")
                        .HasColumnType("int");

                    b.Property<bool>("End")
                        .HasColumnType("bit");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Introduction")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<decimal>("MonthlyCoins")
                        .HasColumnType("money");

                    b.Property<bool>("PrimeRead")
                        .HasColumnType("bit");

                    b.Property<string>("ProfileID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("TotalCoins")
                        .HasColumnType("money");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ViewRecordJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Views")
                        .HasColumnType("int");

                    b.HasKey("NovelID");

                    b.HasIndex("ProfileID");

                    b.ToTable("Novel", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.NovelModel.NovelTag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("TagId");

                    b.ToTable("NovelTags", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.NovelModel.NovelViewer", b =>
                {
                    b.Property<string>("ProfileID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("NovelID")
                        .HasColumnType("int");

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int");

                    b.Property<DateTime>("ViewDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("ProfileID", "NovelID");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("ProfileID", "NovelID"), false);

                    b.HasIndex("NovelID");

                    b.HasIndex("SeqNo")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("SeqNo"));

                    b.ToTable("NovelViewer");
                });

            modelBuilder.Entity("DataAccess.Models.NovelModel.Vote", b =>
                {
                    b.Property<int>("VoteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VoteID"));

                    b.Property<int?>("BiddingOptionID")
                        .HasColumnType("int");

                    b.Property<int?>("NormalOptionID")
                        .HasColumnType("int");

                    b.Property<string>("OwnerID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Value")
                        .HasColumnType("money");

                    b.HasKey("VoteID");

                    b.HasIndex("BiddingOptionID");

                    b.HasIndex("NormalOptionID");

                    b.ToTable("Vote", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.NovelModel.Voting", b =>
                {
                    b.Property<int>("VotingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VotingID"));

                    b.Property<int?>("BiddingLowerLimit")
                        .HasColumnType("int");

                    b.Property<int?>("CoinLimit")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeadLine")
                        .HasColumnType("datetime2");

                    b.Property<bool>("End")
                        .HasColumnType("bit");

                    b.Property<int>("EpisodeID")
                        .HasColumnType("int");

                    b.Property<int>("Limit")
                        .HasColumnType("int");

                    b.Property<int>("Mode")
                        .HasColumnType("int");

                    b.Property<int?>("NumberLimit")
                        .HasColumnType("int");

                    b.Property<string>("OwnerID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Policy")
                        .HasColumnType("int");

                    b.Property<int>("Threshold")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("TotalCoins")
                        .HasColumnType("int");

                    b.Property<int>("TotalNumber")
                        .HasColumnType("int");

                    b.HasKey("VotingID");

                    b.HasIndex("EpisodeID");

                    b.ToTable("Voting", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.Profile", b =>
                {
                    b.Property<string>("ProfileID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Banned")
                        .HasColumnType("bit");

                    b.Property<string>("BannerImageUrl")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("CanChangeUserName")
                        .HasColumnType("bit");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Introduction")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("LastTimeLogin")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("MonthlyCoins")
                        .HasColumnType("money");

                    b.Property<bool>("Prime")
                        .HasColumnType("bit");

                    b.Property<bool>("Professional")
                        .HasColumnType("bit");

                    b.Property<decimal>("RealCoins")
                        .HasColumnType("money");

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int");

                    b.Property<decimal>("UsedCoins")
                        .HasColumnType("money");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Views")
                        .HasColumnType("int");

                    b.Property<decimal>("VirtualCoins")
                        .HasColumnType("money");

                    b.HasKey("ProfileID");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("ProfileID"), false);

                    b.HasIndex("SeqNo")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("SeqNo"));

                    b.ToTable("Profile", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.StatisticalData.Payment", b =>
                {
                    b.Property<int>("PaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentID"));

                    b.Property<string>("InvolverID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MerchantTradeNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReturnString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RtnCode")
                        .HasColumnType("int");

                    b.Property<string>("RtnMsg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SimulatePaid")
                        .HasColumnType("int");

                    b.Property<int>("TradeAmt")
                        .HasColumnType("int");

                    b.Property<string>("TradeDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TradeNo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentID");

                    b.ToTable("Payment", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.StatisticalData.ProfitSharing", b =>
                {
                    b.Property<int>("ProfitSharingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfitSharingID"));

                    b.Property<string>("CreditCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvolverID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SharingDone")
                        .HasColumnType("bit");

                    b.Property<int>("SharingValue")
                        .HasColumnType("int");

                    b.HasKey("ProfitSharingID");

                    b.ToTable("ProfitSharing", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.ViewIp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("ViewIps", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NovelNovelTag", b =>
                {
                    b.Property<int>("NovelTagsTagId")
                        .HasColumnType("int");

                    b.Property<int>("NovelsNovelID")
                        .HasColumnType("int");

                    b.HasKey("NovelTagsTagId", "NovelsNovelID");

                    b.HasIndex("NovelsNovelID");

                    b.ToTable("NovelNovelTag");
                });

            modelBuilder.Entity("NovelViewIp", b =>
                {
                    b.Property<int>("NovelsNovelID")
                        .HasColumnType("int");

                    b.Property<int>("ViewIpsId")
                        .HasColumnType("int");

                    b.HasKey("NovelsNovelID", "ViewIpsId");

                    b.HasIndex("ViewIpsId");

                    b.ToTable("NovelViewIp");
                });

            modelBuilder.Entity("ArticleArticleTag", b =>
                {
                    b.HasOne("DataAccess.Models.ArticleModel.ArticleTag", null)
                        .WithMany()
                        .HasForeignKey("ArticleTagsTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.ArticleModel.Article", null)
                        .WithMany()
                        .HasForeignKey("ArticlesArticleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ArticleViewIp", b =>
                {
                    b.HasOne("DataAccess.Models.ArticleModel.Article", null)
                        .WithMany()
                        .HasForeignKey("ArticlesArticleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.ViewIp", null)
                        .WithMany()
                        .HasForeignKey("ViewIpsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Models.AchievementModel.ProfileAchievement", b =>
                {
                    b.HasOne("DataAccess.Models.AchievementModel.Achievement", "Achievement")
                        .WithMany("ProfileAchievements")
                        .HasForeignKey("AchievementID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.Profile", "Profile")
                        .WithMany("ProfileAchievements")
                        .HasForeignKey("ProfileID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Achievement");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("DataAccess.Models.Agree", b =>
                {
                    b.HasOne("DataAccess.Models.Comment", "Comment")
                        .WithMany("Agrees")
                        .HasForeignKey("CommentID");

                    b.HasOne("DataAccess.Models.Message", "Message")
                        .WithMany("Agrees")
                        .HasForeignKey("MessageID");

                    b.HasOne("DataAccess.Models.Profile", "Profile")
                        .WithMany("Agrees")
                        .HasForeignKey("ProfileID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("Message");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("DataAccess.Models.ArticleModel.Article", b =>
                {
                    b.HasOne("DataAccess.Models.Profile", "Profile")
                        .WithMany("Articles")
                        .HasForeignKey("ProfileID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("DataAccess.Models.ArticleModel.ArticleViewer", b =>
                {
                    b.HasOne("DataAccess.Models.ArticleModel.Article", "Article")
                        .WithMany("ArticleViewers")
                        .HasForeignKey("ArticleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.Profile", "Profile")
                        .WithMany("ArticleViewers")
                        .HasForeignKey("ProfileID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("DataAccess.Models.Comment", b =>
                {
                    b.HasOne("DataAccess.Models.AnnouncementModel.Announcement", "Announcement")
                        .WithMany("Comments")
                        .HasForeignKey("AnnouncementID");

                    b.HasOne("DataAccess.Models.ArticleModel.Article", "Article")
                        .WithMany("Comments")
                        .HasForeignKey("ArticleID");

                    b.HasOne("DataAccess.Models.NovelModel.Episode", "Episode")
                        .WithMany("Comments")
                        .HasForeignKey("EpisodeID");

                    b.HasOne("DataAccess.Models.FeedbackModel.Feedback", "Feedback")
                        .WithMany("Comments")
                        .HasForeignKey("FeedbackID");

                    b.HasOne("DataAccess.Models.NovelModel.Novel", "Novel")
                        .WithMany("Comments")
                        .HasForeignKey("NovelID");

                    b.HasOne("DataAccess.Models.Profile", "Profile")
                        .WithMany("Comments")
                        .HasForeignKey("ProfileID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Announcement");

                    b.Navigation("Article");

                    b.Navigation("Episode");

                    b.Navigation("Feedback");

                    b.Navigation("Novel");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("DataAccess.Models.Follow", b =>
                {
                    b.HasOne("DataAccess.Models.Profile", "Follower")
                        .WithMany("Followers")
                        .HasForeignKey("FollowerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.NovelModel.Novel", "Novel")
                        .WithMany("Follows")
                        .HasForeignKey("NovelID");

                    b.HasOne("DataAccess.Models.Profile", "Profile")
                        .WithMany("Follows")
                        .HasForeignKey("ProfileID");

                    b.Navigation("Follower");

                    b.Navigation("Novel");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("DataAccess.Models.Involving", b =>
                {
                    b.HasOne("DataAccess.Models.ArticleModel.Article", "Article")
                        .WithMany("Involvers")
                        .HasForeignKey("ArticleID");

                    b.HasOne("DataAccess.Models.Profile", "Involver")
                        .WithMany("Involvers")
                        .HasForeignKey("InvolverID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.NovelModel.Novel", "Novel")
                        .WithMany("Involvers")
                        .HasForeignKey("NovelID");

                    b.HasOne("DataAccess.Models.Profile", "Profile")
                        .WithMany("Involvings")
                        .HasForeignKey("ProfileID");

                    b.Navigation("Article");

                    b.Navigation("Involver");

                    b.Navigation("Novel");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("DataAccess.Models.Message", b =>
                {
                    b.HasOne("DataAccess.Models.Comment", "Comment")
                        .WithMany("Messages")
                        .HasForeignKey("CommentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.Profile", "Profile")
                        .WithMany("Messages")
                        .HasForeignKey("ProfileID");

                    b.Navigation("Comment");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("DataAccess.Models.Missions", b =>
                {
                    b.HasOne("DataAccess.Models.Profile", "Profile")
                        .WithOne("Missions")
                        .HasForeignKey("DataAccess.Models.Missions", "ProfileID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("DataAccess.Models.Notification", b =>
                {
                    b.HasOne("DataAccess.Models.Profile", "Profile")
                        .WithMany("Notifications")
                        .HasForeignKey("ProfileID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("DataAccess.Models.NovelModel.BiddingOption", b =>
                {
                    b.HasOne("DataAccess.Models.NovelModel.Voting", "Voting")
                        .WithMany("BiddingOptions")
                        .HasForeignKey("VotingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Voting");
                });

            modelBuilder.Entity("DataAccess.Models.NovelModel.Dice", b =>
                {
                    b.HasOne("DataAccess.Models.Comment", "Comment")
                        .WithMany("Dices")
                        .HasForeignKey("CommentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");
                });

            modelBuilder.Entity("DataAccess.Models.NovelModel.Episode", b =>
                {
                    b.HasOne("DataAccess.Models.NovelModel.Novel", "Novel")
                        .WithMany("Episodes")
                        .HasForeignKey("NovelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Novel");
                });

            modelBuilder.Entity("DataAccess.Models.NovelModel.NormalOption", b =>
                {
                    b.HasOne("DataAccess.Models.NovelModel.Voting", "Voting")
                        .WithMany("NormalOptions")
                        .HasForeignKey("VotingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Voting");
                });

            modelBuilder.Entity("DataAccess.Models.NovelModel.Novel", b =>
                {
                    b.HasOne("DataAccess.Models.Profile", "Profile")
                        .WithMany("Novels")
                        .HasForeignKey("ProfileID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("DataAccess.Models.NovelModel.NovelViewer", b =>
                {
                    b.HasOne("DataAccess.Models.NovelModel.Novel", "Novel")
                        .WithMany("NovelViewers")
                        .HasForeignKey("NovelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.Profile", "Profile")
                        .WithMany("NovelViewers")
                        .HasForeignKey("ProfileID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Novel");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("DataAccess.Models.NovelModel.Vote", b =>
                {
                    b.HasOne("DataAccess.Models.NovelModel.BiddingOption", "BiddingOption")
                        .WithMany("Votes")
                        .HasForeignKey("BiddingOptionID");

                    b.HasOne("DataAccess.Models.NovelModel.NormalOption", "NormalOption")
                        .WithMany("Votes")
                        .HasForeignKey("NormalOptionID");

                    b.Navigation("BiddingOption");

                    b.Navigation("NormalOption");
                });

            modelBuilder.Entity("DataAccess.Models.NovelModel.Voting", b =>
                {
                    b.HasOne("DataAccess.Models.NovelModel.Episode", "Episode")
                        .WithMany("Votings")
                        .HasForeignKey("EpisodeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Episode");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DataAccess.Data.InvolverUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DataAccess.Data.InvolverUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Data.InvolverUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DataAccess.Data.InvolverUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NovelNovelTag", b =>
                {
                    b.HasOne("DataAccess.Models.NovelModel.NovelTag", null)
                        .WithMany()
                        .HasForeignKey("NovelTagsTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.NovelModel.Novel", null)
                        .WithMany()
                        .HasForeignKey("NovelsNovelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NovelViewIp", b =>
                {
                    b.HasOne("DataAccess.Models.NovelModel.Novel", null)
                        .WithMany()
                        .HasForeignKey("NovelsNovelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.ViewIp", null)
                        .WithMany()
                        .HasForeignKey("ViewIpsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Models.AchievementModel.Achievement", b =>
                {
                    b.Navigation("ProfileAchievements");
                });

            modelBuilder.Entity("DataAccess.Models.AnnouncementModel.Announcement", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("DataAccess.Models.ArticleModel.Article", b =>
                {
                    b.Navigation("ArticleViewers");

                    b.Navigation("Comments");

                    b.Navigation("Involvers");
                });

            modelBuilder.Entity("DataAccess.Models.Comment", b =>
                {
                    b.Navigation("Agrees");

                    b.Navigation("Dices");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("DataAccess.Models.FeedbackModel.Feedback", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("DataAccess.Models.Message", b =>
                {
                    b.Navigation("Agrees");
                });

            modelBuilder.Entity("DataAccess.Models.NovelModel.BiddingOption", b =>
                {
                    b.Navigation("Votes");
                });

            modelBuilder.Entity("DataAccess.Models.NovelModel.Episode", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Votings");
                });

            modelBuilder.Entity("DataAccess.Models.NovelModel.NormalOption", b =>
                {
                    b.Navigation("Votes");
                });

            modelBuilder.Entity("DataAccess.Models.NovelModel.Novel", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Episodes");

                    b.Navigation("Follows");

                    b.Navigation("Involvers");

                    b.Navigation("NovelViewers");
                });

            modelBuilder.Entity("DataAccess.Models.NovelModel.Voting", b =>
                {
                    b.Navigation("BiddingOptions");

                    b.Navigation("NormalOptions");
                });

            modelBuilder.Entity("DataAccess.Models.Profile", b =>
                {
                    b.Navigation("Agrees");

                    b.Navigation("ArticleViewers");

                    b.Navigation("Articles");

                    b.Navigation("Comments");

                    b.Navigation("Followers");

                    b.Navigation("Follows");

                    b.Navigation("Involvers");

                    b.Navigation("Involvings");

                    b.Navigation("Messages");

                    b.Navigation("Missions");

                    b.Navigation("Notifications");

                    b.Navigation("NovelViewers");

                    b.Navigation("Novels");

                    b.Navigation("ProfileAchievements");
                });
#pragma warning restore 612, 618
        }
    }
}
