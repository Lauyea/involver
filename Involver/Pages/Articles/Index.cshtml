@page
@model Involver.Pages.Articles.IndexModel

@{
    ViewData["Title"] = "討論";
    Layout = "~/Pages/Shared/_Layout.cshtml";
}
<partial name="_Toasts" model="Model.Toasts" />

<span style="font-size:xx-large;">討論</span> <a asp-page="Create" class="btn btn-xs btn-outline-primary m-2 align-top">建立新文章</a>

<form asp-page="./Index" method="get">
    <div class="form-actions no-color row">
        <p class="col-6">
            <input type="search" name="searchString" value="@Model.CurrentFilter" class="form-control" />
        </p>
        <p class="col-auto">
            <input type="submit" value="搜尋" class="btn btn-primary" /> |
            <a asp-page="./Index" class="btn btn-xs btn-outline-secondary">完整清單</a>
        </p>
        <p class="col-auto">
            <a asp-page="./Tags" title="標籤雲">
                <i class="fas fa-tags"></i>標籤雲
            </a>
        </p>
    </div>
</form>
<p></p>
<div class="row row-cols-1 row-cols-md-3">
    @foreach (var item in Model.Articles)
    {
        <div class="col mb-4">
            <div class="card">
                <a asp-page="./Details" asp-route-id="@item.ArticleID">
                    @if (!string.IsNullOrEmpty(item.ImageUrl))
                    {
                        <img src="@item.ImageUrl"
                     asp-append-version="true"
                             alt="讀取失敗"
                             title="@item.Title"
                             class="card-img-top">

                    }
                </a>
                <div class="card-body">
                    <a asp-page="./Details" asp-route-id="@item.ArticleID">
                        <h5 class="card-title">@Html.DisplayFor(modelItem => item.Title)</h5>
                    </a>
                    @if (item.Block == true)
                    {
                        <span class="text-danger">Block</span>
                    }
                    @{
                        string cardText = item.Content?.Length > Parameters.ContentLength ? item.Content.Substring(0, Parameters.ContentLength) + "..." : item.Content;
                    }
                    <p class="card-text">@Html.AntiXssRaw((cardText))</p>
                    <p>
                        <a asp-area="Identity"
                       asp-page="/Profile/Index"
                       asp-route-id="@item.ProfileID">
                            <small>@Html.DisplayFor(modelItem => item.Profile.UserName)</small>
                        </a>
                        &nbsp;
                        <small>觀看數 <a href="#" class="view-chart-trigger" data-type="article" data-id="@item.ArticleID">@Html.DisplayFor(modelItem => item.TotalViews)</a></small>
                        <div style="width:100px; height:30px;"><canvas id="article-chart-@item.ArticleID"></canvas></div>
                        &nbsp;
                        <small>評論數 @(item.Comments.Count() - 1)</small>
                    </p>
                </div>
                <div class="card-footer">
                    <small class="text-muted">@TimePeriodHelper.Get(item.UpdateTime)</small>
                </div>
            </div>
        </div>
    }
</div>

@{
    var prevDisabled = !Model.Articles.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.Articles.HasNextPage ? "disabled" : "";

    string IsActive(int i)
    {
        string Active = "";
        if (i == Model.Articles.PageIndex)
        {
            Active = "active";
        }
        return Active;
    }

    int StartPage = 1;
    int EndPage = 1;

    PageSizeHelper.Get(Model.Articles.PageIndex, Model.Articles.TotalPages, ref StartPage, ref EndPage);
}

<div class="row">
    <div class="col-auto">
        <nav>
            <ul class="pagination">
                <li class="page-item @prevDisabled">
                    <a asp-page="./Index"
                       asp-route-PageIndex="1"
                       asp-route-currentFilter="@Model.CurrentFilter"
                       class="page-link">
                        首
                    </a>
                </li>
                <li class="page-item @prevDisabled">
                    <a asp-page="./Index"
                       asp-route-PageIndex="@(Model.Articles.PageIndex-1)"
                       asp-route-currentFilter="@Model.CurrentFilter"
                       class="page-link">
                        前
                    </a>
                </li>
                @for (int i = StartPage; i < EndPage + 1; i++)
                {
                    <li class="page-item @IsActive(i)">
                        <a asp-page="./Index"
                       asp-route-PageIndex="@i"
                       asp-route-currentFilter="@Model.CurrentFilter"
                       class="page-link">
                            @i
                            @if (i == Model.Articles.PageIndex)
                            {
                                <span class="sr-only">(current)</span>
                            }
                        </a>
                    </li>

                }
                <li class="page-item @nextDisabled">
                    <a asp-page="./Index"
                       asp-route-PageIndex="@(Model.Articles.PageIndex+1)"
                       asp-route-currentFilter="@Model.CurrentFilter"
                       class="page-link">
                        後
                    </a>
                </li>
                <li class="page-item @nextDisabled">
                    <a asp-page="./Index"
                       asp-route-PageIndex="@(Model.Articles.TotalPages)"
                       asp-route-currentFilter="@Model.CurrentFilter"
                       class="page-link">
                        末
                    </a>
                </li>
            </ul>
        </nav>
    </div>
    <div class="col-auto">
        <form class="form-inline"
              asp-page="./Index"
              method="get">
            <div class="form-group">
                <input type="text" name="currentFilter"
                       value="@Model.CurrentFilter"
                       class="form-control"
                       style="width:0px;display:none" />
            </div>
            <div class="form-group">
                <input type="number" name="pageIndex"
                       value="@Model.Articles.PageIndex"
                       class="form-control"
                       style="max-width:100px;display:inline" />
            </div>
            &nbsp&nbsp
            <div class="form-group">
                <input type="submit" value="跳轉" class="btn btn-outline-primary" />
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', async function () {
            const chartCanvases = document.querySelectorAll('canvas[id^="article-chart-"]');
            if (chartCanvases.length === 0) {
                return;
            }

            const articleIdArray = Array.from(chartCanvases).map(canvas => canvas.id.split('-').pop());
            const uniqueArticleIds = [...new Set(articleIdArray)];

            const response = await fetch('/api/Views/GetBatchArticleViews', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(uniqueArticleIds),
            });

            if (!response.ok) {
                return;
            }

            const batchData = await response.json();

            chartCanvases.forEach(canvas => {
                const articleId = canvas.id.split('-').pop();
                const viewsData = batchData[articleId] || [];

                const labels = [];
                for (let i = 6; i >= 0; i--) {
                    const d = new Date();
                    d.setDate(d.getDate() - i);
                    labels.push(d.toISOString().split('T')[0]);
                }

                const dataPoints = labels.map(label => {
                    const apiDataPoint = viewsData.find(d => d.date.startsWith(label));
                    return apiDataPoint ? apiDataPoint.views : 0;
                });

                new Chart(canvas, {
                    type: 'line',
                    data: {
                        labels: labels,
                        datasets: [{
                            data: dataPoints,
                            backgroundColor: 'rgb(255, 200, 132)',
                            borderColor: 'rgb(255, 200, 132)',
                            borderWidth: 2,
                            pointRadius: 0, // Hide points
                            tension: 0.2
                        }]
                    },
                    options: {
                        scales: {
                            y: { display: false }, // Hide Y axis
                            x: { display: false }  // Hide X axis
                        },
                        plugins: {
                            legend: { display: false }, // Hide legend
                            tooltip: { enabled: false } // Disable tooltips
                        },
                        maintainAspectRatio: false
                    }
                });
            });
        });
    </script>
}