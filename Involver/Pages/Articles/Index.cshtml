@page
@model Involver.Pages.Articles.IndexModel
@using Involver.Helpers
@using Involver.Common

@{
    ViewData["Title"] = "討論";
    Layout = "~/Pages/Shared/_Layout.cshtml";

    // Arrow logic for sorting
    string arrowDate = Model.CurrentSort?.StartsWith("Date") ?? false ? (Model.CurrentSort.EndsWith("desc") ? "<i class='fas fa-chevron-down'></i>" : "<i class='fas fa-chevron-up'></i>") : "";
    string arrowView = Model.CurrentSort?.StartsWith("View") ?? false ? (Model.CurrentSort.EndsWith("desc") ? "<i class='fas fa-chevron-down'></i>" : "<i class='fas fa-chevron-up'></i>") : "";
}

<partial name="_Toasts" model="Model.Toasts" />

<div class="card">
    <div class="card-header">
        <div class="d-flex justify-content-between align-items-center">
            <h1 class="mb-0">討論</h1>
            <div>
                <a asp-page="./Tags" class="btn btn-info" title="標籤雲">
                    <i class="fas fa-tags"></i> 標籤雲
                </a>
                <a asp-page="Create" class="btn btn-primary">建立新文章</a>
            </div>
        </div>
    </div>
    <div class="card-body">
        <form asp-page="./Index" method="get" class="mb-4">
            <div class="input-group">
                <input type="search" name="searchString" value="@Model.CurrentFilter" class="form-control" placeholder="搜尋文章..." />
                <div class="input-group-append">
                    <input type="submit" value="搜尋" class="btn btn-primary" />
                    <a asp-page="./Index" class="btn btn-secondary">完整清單</a>
                </div>
            </div>
        </form>

        <div class="d-flex justify-content-between align-items-center mb-3">
            <div class="btn-group btn-group-sm">
                <a asp-page="./Index" asp-route-sortOrder="@Model.DateSort" asp-route-currentFilter="@Model.CurrentFilter" class="btn btn-outline-primary @(Model.CurrentSort == Model.DateSort ? "active" : "")">時間 @Html.Raw(arrowDate)</a>
                <a asp-page="./Index" asp-route-sortOrder="@Model.ViewSort" asp-route-currentFilter="@Model.CurrentFilter" class="btn btn-outline-primary @(Model.CurrentSort == Model.ViewSort ? "active" : "")">觀看數 @Html.Raw(arrowView)</a>
            </div>
        </div>

        <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3">
            @foreach (var item in Model.Articles)
            {
                <div class="col mb-4">
                    <div class="card h-100 hover-effect">
                        <a asp-page="./Details" asp-route-id="@item.ArticleID">
                            @if (!string.IsNullOrEmpty(item.ImageUrl))
                            {
                                <img src="@item.ImageUrl" asp-append-version="true" alt="@item.Title" title="@item.Title" class="card-img-top">
                            }
                        </a>
                        <div class="card-body d-flex flex-column">
                            <a asp-page="./Details" asp-route-id="@item.ArticleID">
                                <h5 class="card-title">@Html.DisplayFor(modelItem => item.Title)</h5>
                                @if (item.Block == true)
                                {
                                    <small class="badge-danger badge-pill ms-1">Block</small>
                                }
                            </a>
                            @{
                                string cardText = item.Content?.Length > Parameters.ContentLength ? item.Content.Substring(0, Parameters.ContentLength) + "..." : item.Content;
                            }
                            <p class="card-text flex-grow-1">@Html.AntiXssRaw(cardText)</p>
                            <div class="d-flex justify-content-between align-items-center mt-2">
                                <a asp-area="Identity" asp-page="/Profile/Index" asp-route-id="@item.ProfileID">
                                    <small>@Html.DisplayFor(modelItem => item.Profile.UserName)</small>
                                </a>
                                <div>
                                    <small class="mr-2"><i class="far fa-comment"></i> @item.Comments.Count()</small>
                                    <small><i class="far fa-eye"></i> 
                                        <a href="#" class="view-chart-trigger" data-type="article" data-id="@item.ArticleID">
                                            @Html.DisplayFor(modelItem => item.TotalViews)
                                        </a>
                                    </small>
                                </div>
                            </div>
                        </div>

                        <div class="card-footer">
                            <div class="d-flex justify-content-between align-items-center">
                                <div class="d-flex align-items-center flex-wrap">
                                    @foreach (var tag in item.ArticleTags)
                                    {
                                        <a asp-page="./Index" asp-route-currentFilter="@tag.Name" class="badge badge-info mr-1 mb-1">@tag.Name</a>
                                    }
                                </div>

                                <div class="d-flex align-items-center">
                                    <div class="mr-2" style="width:100px; height:30px;" title="最近觀看趨勢">
                                        <canvas id="article-chart-@item.ArticleID"></canvas>
                                    </div>
                                    <small class="text-muted text-nowrap" title="@item.UpdateTime">@TimePeriodHelper.Get(item.UpdateTime)</small>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
    <div class="card-footer">
        @if (Model.Articles.TotalPages > 1)
        {
            var prevDisabled = !Model.Articles.HasPreviousPage ? "disabled" : "";
            var nextDisabled = !Model.Articles.HasNextPage ? "disabled" : "";

            int startPage = 1;
            int endPage = 1;

            PageSizeHelper.Get(Model.Articles.PageIndex, Model.Articles.TotalPages, ref startPage, ref endPage);

            <div class="d-flex justify-content-between align-items-center">
                <nav aria-label="Page navigation">
                    <ul class="pagination mb-0">
                        <li class="page-item @prevDisabled">
                            <a asp-page="./Index" asp-route-sortOrder="@Model.CurrentSort" asp-route-PageIndex="1" asp-route-currentFilter="@Model.CurrentFilter" class="page-link"><i class="fas fa-angle-double-left"></i></a>
                        </li>
                        <li class="page-item @prevDisabled">
                            <a asp-page="./Index" asp-route-sortOrder="@Model.CurrentSort" asp-route-PageIndex="@(Model.Articles.PageIndex - 1)" asp-route-currentFilter="@Model.CurrentFilter" class="page-link"><i class="fas fa-angle-left"></i></a>
                        </li>
                        @for (int i = startPage; i <= endPage; i++)
                        {
                            <li class="page-item @(i == Model.Articles.PageIndex ? "active" : "")">
                                <a asp-page="./Index" asp-route-sortOrder="@Model.CurrentSort" asp-route-PageIndex="@i" asp-route-currentFilter="@Model.CurrentFilter" class="page-link">@i</a>
                            </li>
                        }
                        <li class="page-item @nextDisabled">
                            <a asp-page="./Index" asp-route-sortOrder="@Model.CurrentSort" asp-route-PageIndex="@(Model.Articles.PageIndex + 1)" asp-route-currentFilter="@Model.CurrentFilter" class="page-link"><i class="fas fa-angle-right"></i></a>
                        </li>
                        <li class="page-item @nextDisabled">
                            <a asp-page="./Index" asp-route-sortOrder="@Model.CurrentSort" asp-route-PageIndex="@Model.Articles.TotalPages" asp-route-currentFilter="@Model.CurrentFilter" class="page-link"><i class="fas fa-angle-double-right"></i></a>
                        </li>
                    </ul>
                </nav>

                <form class="form-inline" asp-page="./Index" method="get">
                    <input type="hidden" name="sortOrder" value="@Model.CurrentSort" />
                    <input type="hidden" name="currentFilter" value="@Model.CurrentFilter" />
                    <div class="input-group">
                        <input type="number" name="pageIndex" value="@Model.Articles.PageIndex" class="form-control" style="width: 75px;" />
                        <div class="input-group-append">
                            <input type="submit" value="跳轉" class="btn btn-outline-primary" />
                        </div>
                    </div>
                </form>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', async function () {
            const chartCanvases = document.querySelectorAll('canvas[id^="article-chart-"]');
            if (chartCanvases.length === 0) {
                return;
            }

            const articleIdArray = Array.from(chartCanvases).map(canvas => canvas.id.split('-').pop());
            const uniqueArticleIds = [...new Set(articleIdArray)];

            const response = await fetch('/api/Views/GetBatchArticleViews', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(uniqueArticleIds),
            });

            if (!response.ok) {
                return;
            }

            const batchData = await response.json();

            chartCanvases.forEach(canvas => {
                const articleId = canvas.id.split('-').pop();
                const viewsData = batchData[articleId] || [];

                const labels = [];
                for (let i = 6; i >= 0; i--) {
                    const d = new Date();
                    d.setDate(d.getDate() - i);
                    labels.push(d.toISOString().split('T')[0]);
                }

                const dataPoints = labels.map(label => {
                    const apiDataPoint = viewsData.find(d => d.date.startsWith(label));
                    return apiDataPoint ? apiDataPoint.views : 0;
                });

                new Chart(canvas, {
                    type: 'line',
                    data: {
                        labels: labels,
                        datasets: [{
                            data: dataPoints,
                            backgroundColor: 'rgb(255, 200, 132)',
                            borderColor: 'rgb(255, 200, 132)',
                            borderWidth: 2,
                            pointRadius: 0, // Hide points
                            tension: 0.2
                        }]
                    },
                    options: {
                        scales: {
                            y: { display: false }, // Hide Y axis
                            x: { display: false }  // Hide X axis
                        },
                        plugins: {
                            legend: { display: false }, // Hide legend
                            tooltip: { enabled: false } // Disable tooltips
                        },
                        maintainAspectRatio: false
                    }
                });
            });
        });
    </script>
}