@page
@model Involver.Pages.Comments.EditModel

@{
    ViewData["Title"] = "編輯";
    Layout = "~/Pages/Shared/_Layout.cshtml";
}

<h1>編輯</h1>

<p class="text-danger">@Model.ErrorMessage</p>

<h4>評論</h4>
<hr />
<div class="row">
    <div class="col-md-6">
        <form method="post">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="Comment.CommentID" />
            <input type="hidden" asp-for="Comment.ProfileID" />
            <div class="form-group">
                <label asp-for="Comment.Content" class="control-label"></label>
                <textarea asp-for="Comment.Content" id="editor" class="form-control" rows="7"></textarea>
                <div id="word-count"></div>
                <span asp-validation-for="Comment.Content" class="text-danger"></span>
            </div>
            @if ((await AuthorizationService.AuthorizeAsync(
               User, Model.Comment,
               CommentOperations.Block)).Succeeded)
            {
                <div class="form-group form-check">
                    <label class="form-check-label">
                        <input class="form-check-input" asp-for="Comment.Block" /> @Html.DisplayNameFor(model => model.Comment.Block)
                    </label>
                </div>
            }
            <div class="form-group">
                <input type="submit" value="儲存" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

@*<div>
        <a asp-page="./Index">Back to List</a>
    </div>*@

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>
        ClassicEditor
            .create(document.querySelector('#editor'), {
                toolbar: {
                    items: [
                        'heading',
                        '|',
                        'bold',
                        'italic',
                        'underline',
                        'strikethrough',
                        'fontBackgroundColor',
                        'fontColor',
                        'removeFormat',
                        'findAndReplace',
                        '|',
                        'alignment',
                        'bulletedList',
                        'numberedList',
                        'outdent',
                        'indent',
                        'horizontalLine',
                        '|',
                        'link',
                        'imageInsert',
                        'blockQuote',
                        'insertTable',
                        'mediaEmbed',
                        'sourceEditing',
                        'undo',
                        'redo'
                    ]
                },
                link: {
                    // Automatically add target="_blank" and rel="noopener noreferrer" to all external links.
                    addTargetToExternalLinks: true
                },
                image: {
                    toolbar: [
                        'imageTextAlternative',
                        'imageStyle:inline',
                        'imageStyle:block',
                        'imageStyle:side'
                    ]
                },
                table: {
                    contentToolbar: [
                        'tableColumn',
                        'tableRow',
                        'mergeTableCells'
                    ]
                },
                licenseKey: '',
                mediaEmbed: {
                    previewsInData: true
                },
                wordCount:{
                    displayWords: false,
                    onUpdate: stats => {
                        if (stats.characters > @Parameters.CommentLength) {
                            alert("輸入字元超過最大限制: @Parameters.CommentLength");
                        }
                    }
                }
            })
            .then(editor => {
                window.editor = editor;

                const wordCountPlugin = editor.plugins.get( 'WordCount' );
                const wordCountWrapper = document.getElementById( 'word-count' );

                wordCountWrapper.appendChild( wordCountPlugin.wordCountContainer );
            })
            .catch(error => {
                console.error('Oops, something went wrong!');
                console.error(error);
            });
    </script>
}
