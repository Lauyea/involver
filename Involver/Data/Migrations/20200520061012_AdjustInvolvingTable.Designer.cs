// <auto-generated />
using System;
using Involver.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Involver.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200520061012_AdjustInvolvingTable")]
    partial class AdjustInvolvingTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Involver.Data.InvolverUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Involver.Models.Agree", b =>
                {
                    b.Property<int>("AgreeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CommentID")
                        .HasColumnType("int");

                    b.Property<int?>("MessageID")
                        .HasColumnType("int");

                    b.Property<string>("ProfileID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("AgreeID");

                    b.HasIndex("CommentID");

                    b.HasIndex("MessageID");

                    b.HasIndex("ProfileID");

                    b.ToTable("Agree");
                });

            modelBuilder.Entity("Involver.Models.AnnouncementModel.Announcement", b =>
                {
                    b.Property<int>("AnnouncementID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(65536);

                    b.Property<string>("OwnerID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Views")
                        .HasColumnType("int");

                    b.HasKey("AnnouncementID");

                    b.ToTable("Announcement");
                });

            modelBuilder.Entity("Involver.Models.ArticleModel.Article", b =>
                {
                    b.Property<int>("ArticleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Block")
                        .HasColumnType("bit");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(65536);

                    b.Property<decimal>("MonthlyCoins")
                        .HasColumnType("money");

                    b.Property<string>("ProfileID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<decimal>("TotalCoins")
                        .HasColumnType("money");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Views")
                        .HasColumnType("int");

                    b.HasKey("ArticleID");

                    b.HasIndex("ProfileID");

                    b.ToTable("Article");
                });

            modelBuilder.Entity("Involver.Models.Comment", b =>
                {
                    b.Property<int>("CommentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AnnouncementID")
                        .HasColumnType("int");

                    b.Property<int?>("ArticleID")
                        .HasColumnType("int");

                    b.Property<bool>("Block")
                        .HasColumnType("bit");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(16384);

                    b.Property<int?>("EpisodeID")
                        .HasColumnType("int");

                    b.Property<int?>("FeedbackID")
                        .HasColumnType("int");

                    b.Property<int?>("NovelID")
                        .HasColumnType("int");

                    b.Property<string>("ProfileID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("CommentID");

                    b.HasIndex("AnnouncementID");

                    b.HasIndex("ArticleID");

                    b.HasIndex("EpisodeID");

                    b.HasIndex("FeedbackID");

                    b.HasIndex("NovelID");

                    b.HasIndex("ProfileID");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("Involver.Models.FeedbackModel.Feedback", b =>
                {
                    b.Property<int>("FeedbackID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Block")
                        .HasColumnType("bit");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(65536);

                    b.Property<string>("OwnerID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("FeedbackID");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("Involver.Models.Follow", b =>
                {
                    b.Property<int>("FollowID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FollowerID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("NovelID")
                        .HasColumnType("int");

                    b.Property<string>("ProfileID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("SubscribeNovel")
                        .HasColumnType("bit");

                    b.Property<bool>("SubscribeUser")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("FollowID");

                    b.HasIndex("FollowerID");

                    b.HasIndex("NovelID");

                    b.HasIndex("ProfileID");

                    b.ToTable("Follow");
                });

            modelBuilder.Entity("Involver.Models.Involving", b =>
                {
                    b.Property<int>("InvolvingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ArticleID")
                        .HasColumnType("int");

                    b.Property<string>("InvolverID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("LastTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("MonthlyValue")
                        .HasColumnType("money");

                    b.Property<int?>("NovelID")
                        .HasColumnType("int");

                    b.Property<string>("ProfileID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("TotalValue")
                        .HasColumnType("money");

                    b.Property<decimal>("Value")
                        .HasColumnType("money");

                    b.HasKey("InvolvingID");

                    b.HasIndex("ArticleID");

                    b.HasIndex("InvolverID");

                    b.HasIndex("NovelID");

                    b.HasIndex("ProfileID");

                    b.ToTable("Involving");
                });

            modelBuilder.Entity("Involver.Models.Message", b =>
                {
                    b.Property<int>("MessageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Block")
                        .HasColumnType("bit");

                    b.Property<int>("CommentID")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<string>("ProfileID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("MessageID");

                    b.HasIndex("CommentID");

                    b.HasIndex("ProfileID");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("Involver.Models.Missions", b =>
                {
                    b.Property<int>("MissionsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("BeAgreed")
                        .HasColumnType("bit");

                    b.Property<bool>("CompleteOtherMissions")
                        .HasColumnType("bit");

                    b.Property<bool>("LeaveComment")
                        .HasColumnType("bit");

                    b.Property<string>("ProfileID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("ShareCreation")
                        .HasColumnType("bit");

                    b.Property<bool>("ViewAnnouncement")
                        .HasColumnType("bit");

                    b.Property<bool>("Vote")
                        .HasColumnType("bit");

                    b.Property<bool>("WatchArticle")
                        .HasColumnType("bit");

                    b.HasKey("MissionsID");

                    b.HasIndex("ProfileID")
                        .IsUnique()
                        .HasFilter("[ProfileID] IS NOT NULL");

                    b.ToTable("Missions");
                });

            modelBuilder.Entity("Involver.Models.NovelModel.BiddingOption", b =>
                {
                    b.Property<int>("BiddingOptionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("BiddingCoins")
                        .HasColumnType("money");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("OwnerID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalCoins")
                        .HasColumnType("money");

                    b.Property<int>("VotingID")
                        .HasColumnType("int");

                    b.HasKey("BiddingOptionID");

                    b.HasIndex("VotingID");

                    b.ToTable("BiddingOption");
                });

            modelBuilder.Entity("Involver.Models.NovelModel.Dice", b =>
                {
                    b.Property<int>("DiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CommentID")
                        .HasColumnType("int");

                    b.Property<int>("Sides")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("DiceID");

                    b.HasIndex("CommentID");

                    b.ToTable("Dice");
                });

            modelBuilder.Entity("Involver.Models.NovelModel.Episode", b =>
                {
                    b.Property<int>("EpisodeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(65536);

                    b.Property<bool>("HasVoting")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLast")
                        .HasColumnType("bit");

                    b.Property<int>("NovelID")
                        .HasColumnType("int");

                    b.Property<string>("OwnerID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Views")
                        .HasColumnType("int");

                    b.HasKey("EpisodeID");

                    b.HasIndex("NovelID");

                    b.ToTable("Episode");
                });

            modelBuilder.Entity("Involver.Models.NovelModel.NormalOption", b =>
                {
                    b.Property<int>("NormalOptionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("OwnerID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalCoins")
                        .HasColumnType("money");

                    b.Property<int>("VotingID")
                        .HasColumnType("int");

                    b.HasKey("NormalOptionID");

                    b.HasIndex("VotingID");

                    b.ToTable("NormalOption");
                });

            modelBuilder.Entity("Involver.Models.NovelModel.Novel", b =>
                {
                    b.Property<int>("NovelID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Block")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("End")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)")
                        .HasMaxLength(2097152);

                    b.Property<string>("Introduction")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<decimal>("MonthlyCoins")
                        .HasColumnType("money");

                    b.Property<bool>("PrimeRead")
                        .HasColumnType("bit");

                    b.Property<string>("ProfileID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<decimal>("TotalCoins")
                        .HasColumnType("money");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Views")
                        .HasColumnType("int");

                    b.HasKey("NovelID");

                    b.HasIndex("ProfileID");

                    b.ToTable("Novel");
                });

            modelBuilder.Entity("Involver.Models.NovelModel.Vote", b =>
                {
                    b.Property<int>("VoteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BiddingOptionID")
                        .HasColumnType("int");

                    b.Property<int?>("NormalOptionID")
                        .HasColumnType("int");

                    b.Property<string>("OwnerID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Value")
                        .HasColumnType("money");

                    b.HasKey("VoteID");

                    b.HasIndex("BiddingOptionID");

                    b.HasIndex("NormalOptionID");

                    b.ToTable("Vote");
                });

            modelBuilder.Entity("Involver.Models.NovelModel.Voting", b =>
                {
                    b.Property<int>("VotingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BiddingLowerLimit")
                        .HasColumnType("int");

                    b.Property<int?>("CoinLimit")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeadLine")
                        .HasColumnType("datetime2");

                    b.Property<bool>("End")
                        .HasColumnType("bit");

                    b.Property<int>("EpisodeID")
                        .HasColumnType("int");

                    b.Property<int>("Limit")
                        .HasColumnType("int");

                    b.Property<int>("Mode")
                        .HasColumnType("int");

                    b.Property<int?>("NumberLimit")
                        .HasColumnType("int");

                    b.Property<string>("OwnerID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Policy")
                        .HasColumnType("int");

                    b.Property<int>("Threshold")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<int>("TotalCoins")
                        .HasColumnType("int");

                    b.Property<int>("TotalNumber")
                        .HasColumnType("int");

                    b.HasKey("VotingID");

                    b.HasIndex("EpisodeID");

                    b.ToTable("Voting");
                });

            modelBuilder.Entity("Involver.Models.Profile", b =>
                {
                    b.Property<string>("ProfileID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Banned")
                        .HasColumnType("bit");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)")
                        .HasMaxLength(2097152);

                    b.Property<string>("Introduction")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<DateTime>("LastTimeLogin")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("MonthlyCoins")
                        .HasColumnType("money");

                    b.Property<bool>("Prime")
                        .HasColumnType("bit");

                    b.Property<bool>("Professioal")
                        .HasColumnType("bit");

                    b.Property<decimal>("RealCoins")
                        .HasColumnType("money");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("Views")
                        .HasColumnType("int");

                    b.Property<decimal>("VirtualCoins")
                        .HasColumnType("money");

                    b.HasKey("ProfileID");

                    b.ToTable("Profile");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Involver.Models.Agree", b =>
                {
                    b.HasOne("Involver.Models.Comment", "Comment")
                        .WithMany("Agrees")
                        .HasForeignKey("CommentID");

                    b.HasOne("Involver.Models.Message", "Message")
                        .WithMany("Agrees")
                        .HasForeignKey("MessageID");

                    b.HasOne("Involver.Models.Profile", "Profile")
                        .WithMany("Agrees")
                        .HasForeignKey("ProfileID");
                });

            modelBuilder.Entity("Involver.Models.ArticleModel.Article", b =>
                {
                    b.HasOne("Involver.Models.Profile", "Profile")
                        .WithMany("Articles")
                        .HasForeignKey("ProfileID");
                });

            modelBuilder.Entity("Involver.Models.Comment", b =>
                {
                    b.HasOne("Involver.Models.AnnouncementModel.Announcement", "Announcement")
                        .WithMany("Comments")
                        .HasForeignKey("AnnouncementID");

                    b.HasOne("Involver.Models.ArticleModel.Article", "Article")
                        .WithMany("Comments")
                        .HasForeignKey("ArticleID");

                    b.HasOne("Involver.Models.NovelModel.Episode", "Episode")
                        .WithMany("Comments")
                        .HasForeignKey("EpisodeID");

                    b.HasOne("Involver.Models.FeedbackModel.Feedback", "Feedback")
                        .WithMany("Comments")
                        .HasForeignKey("FeedbackID");

                    b.HasOne("Involver.Models.NovelModel.Novel", "Novel")
                        .WithMany("Comments")
                        .HasForeignKey("NovelID");

                    b.HasOne("Involver.Models.Profile", "Profile")
                        .WithMany("Comments")
                        .HasForeignKey("ProfileID");
                });

            modelBuilder.Entity("Involver.Models.Follow", b =>
                {
                    b.HasOne("Involver.Models.Profile", "Follower")
                        .WithMany("Followers")
                        .HasForeignKey("FollowerID");

                    b.HasOne("Involver.Models.NovelModel.Novel", "Novel")
                        .WithMany("Follows")
                        .HasForeignKey("NovelID");

                    b.HasOne("Involver.Models.Profile", "Profile")
                        .WithMany("Follows")
                        .HasForeignKey("ProfileID");
                });

            modelBuilder.Entity("Involver.Models.Involving", b =>
                {
                    b.HasOne("Involver.Models.ArticleModel.Article", "Article")
                        .WithMany("Involvings")
                        .HasForeignKey("ArticleID");

                    b.HasOne("Involver.Models.Profile", "Involver")
                        .WithMany("Involvers")
                        .HasForeignKey("InvolverID");

                    b.HasOne("Involver.Models.NovelModel.Novel", "Novel")
                        .WithMany("Involvings")
                        .HasForeignKey("NovelID");

                    b.HasOne("Involver.Models.Profile", "Profile")
                        .WithMany("Involvings")
                        .HasForeignKey("ProfileID");
                });

            modelBuilder.Entity("Involver.Models.Message", b =>
                {
                    b.HasOne("Involver.Models.Comment", "Comment")
                        .WithMany("Messages")
                        .HasForeignKey("CommentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Involver.Models.Profile", "Profile")
                        .WithMany("Messages")
                        .HasForeignKey("ProfileID");
                });

            modelBuilder.Entity("Involver.Models.Missions", b =>
                {
                    b.HasOne("Involver.Models.Profile", "Profile")
                        .WithOne("Missions")
                        .HasForeignKey("Involver.Models.Missions", "ProfileID");
                });

            modelBuilder.Entity("Involver.Models.NovelModel.BiddingOption", b =>
                {
                    b.HasOne("Involver.Models.NovelModel.Voting", "Voting")
                        .WithMany("BiddingOptions")
                        .HasForeignKey("VotingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Involver.Models.NovelModel.Dice", b =>
                {
                    b.HasOne("Involver.Models.Comment", "Comment")
                        .WithMany("Dices")
                        .HasForeignKey("CommentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Involver.Models.NovelModel.Episode", b =>
                {
                    b.HasOne("Involver.Models.NovelModel.Novel", "Novel")
                        .WithMany("Episodes")
                        .HasForeignKey("NovelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Involver.Models.NovelModel.NormalOption", b =>
                {
                    b.HasOne("Involver.Models.NovelModel.Voting", "Voting")
                        .WithMany("NormalOptions")
                        .HasForeignKey("VotingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Involver.Models.NovelModel.Novel", b =>
                {
                    b.HasOne("Involver.Models.Profile", "Profile")
                        .WithMany("Novels")
                        .HasForeignKey("ProfileID");
                });

            modelBuilder.Entity("Involver.Models.NovelModel.Vote", b =>
                {
                    b.HasOne("Involver.Models.NovelModel.BiddingOption", "BiddingOption")
                        .WithMany("Votes")
                        .HasForeignKey("BiddingOptionID");

                    b.HasOne("Involver.Models.NovelModel.NormalOption", "NormalOption")
                        .WithMany("Votes")
                        .HasForeignKey("NormalOptionID");
                });

            modelBuilder.Entity("Involver.Models.NovelModel.Voting", b =>
                {
                    b.HasOne("Involver.Models.NovelModel.Episode", "Episode")
                        .WithMany("Votings")
                        .HasForeignKey("EpisodeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Involver.Data.InvolverUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Involver.Data.InvolverUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Involver.Data.InvolverUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Involver.Data.InvolverUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
