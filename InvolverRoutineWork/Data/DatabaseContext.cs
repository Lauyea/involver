// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable enable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Data.Models.Database;

namespace InvolverRoutineWork.Data
{
    public partial class DatabaseContext : DbContext
    {
        public DatabaseContext(DbContextOptions<DatabaseContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Achievement> Achievements { get; set; } = null!;
        public virtual DbSet<Agree> Agrees { get; set; } = null!;
        public virtual DbSet<Announcement> Announcements { get; set; } = null!;
        public virtual DbSet<Article> Articles { get; set; } = null!;
        public virtual DbSet<ArticleArticleTag> ArticleArticleTags { get; set; } = null!;
        public virtual DbSet<ArticleTag> ArticleTags { get; set; } = null!;
        public virtual DbSet<ArticleViewIp> ArticleViewIps { get; set; } = null!;
        public virtual DbSet<ArticleViewer> ArticleViewers { get; set; } = null!;
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; } = null!;
        public virtual DbSet<AspNetRoleClaim> AspNetRoleClaims { get; set; } = null!;
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; } = null!;
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; } = null!;
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; } = null!;
        public virtual DbSet<AspNetUserRole> AspNetUserRoles { get; set; } = null!;
        public virtual DbSet<AspNetUserToken> AspNetUserTokens { get; set; } = null!;
        public virtual DbSet<BiddingOption> BiddingOptions { get; set; } = null!;
        public virtual DbSet<Comment> Comments { get; set; } = null!;
        public virtual DbSet<Die> Dice { get; set; } = null!;
        public virtual DbSet<Episode> Episodes { get; set; } = null!;
        public virtual DbSet<Feedback> Feedbacks { get; set; } = null!;
        public virtual DbSet<Follow> Follows { get; set; } = null!;
        public virtual DbSet<Involving> Involvings { get; set; } = null!;
        public virtual DbSet<Message> Messages { get; set; } = null!;
        public virtual DbSet<Mission> Missions { get; set; } = null!;
        public virtual DbSet<NormalOption> NormalOptions { get; set; } = null!;
        public virtual DbSet<Notification> Notifications { get; set; } = null!;
        public virtual DbSet<Novel> Novels { get; set; } = null!;
        public virtual DbSet<NovelNovelTag> NovelNovelTags { get; set; } = null!;
        public virtual DbSet<NovelTag> NovelTags { get; set; } = null!;
        public virtual DbSet<NovelViewIp> NovelViewIps { get; set; } = null!;
        public virtual DbSet<NovelViewer> NovelViewers { get; set; } = null!;
        public virtual DbSet<Payment> Payments { get; set; } = null!;
        public virtual DbSet<Profile> Profiles { get; set; } = null!;
        public virtual DbSet<ProfileAchievement> ProfileAchievements { get; set; } = null!;
        public virtual DbSet<ProfitSharing> ProfitSharings { get; set; } = null!;
        public virtual DbSet<ViewIp> ViewIps { get; set; } = null!;
        public virtual DbSet<Vote> Votes { get; set; } = null!;
        public virtual DbSet<Voting> Votings { get; set; } = null!;

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Scaffolding:ConnectionString", "Data Source=(local);Initial Catalog=Database;Integrated Security=true");

            modelBuilder.Entity<Achievement>(entity =>
            {
                entity.Property(e => e.Code).HasDefaultValueSql("n''");
            });

            modelBuilder.Entity<Article>(entity =>
            {
                entity.Property(e => e.CreateTime).HasDefaultValueSql("getdate()");
            });

            modelBuilder.Entity<ArticleArticleTag>(entity =>
            {
                entity.HasKey(e => new { e.ArticleTagsTagId, e.ArticlesArticleId });
            });

            modelBuilder.Entity<ArticleViewIp>(entity =>
            {
                entity.HasKey(e => new { e.ArticlesArticleId, e.ViewIpsId });
            });

            modelBuilder.Entity<ArticleViewer>(entity =>
            {
                entity.HasKey(e => new { e.ProfileId, e.ArticleId })
                    .IsClustered(false);

                entity.HasIndex(e => e.SeqNo, "IX_ArticleViewer_SeqNo")
                    .IsUnique()
                    .IsClustered();

                entity.Property(e => e.SeqNo).ValueGeneratedOnAdd();

                entity.Property(e => e.ViewDate).HasDefaultValueSql("getdate()");

                entity.HasOne(d => d.Profile)
                    .WithMany(p => p.ArticleViewers)
                    .HasForeignKey(d => d.ProfileId)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<AspNetRole>(entity =>
            {
                entity.HasIndex(e => e.NormalizedName, "RoleNameIndex")
                    .IsUnique()
                    .HasFilter("([NormalizedName] IS NOT NULL)");
            });

            modelBuilder.Entity<AspNetUser>(entity =>
            {
                entity.HasIndex(e => e.NormalizedUserName, "UserNameIndex")
                    .IsUnique()
                    .HasFilter("([NormalizedUserName] IS NOT NULL)");

                entity.Property(e => e.Banned).HasDefaultValueSql("convert([bit],(0))");

                entity.Property(e => e.Prime).HasDefaultValueSql("convert([bit],(0))");
            });

            modelBuilder.Entity<AspNetUserLogin>(entity =>
            {
                entity.HasKey(e => new { e.LoginProvider, e.ProviderKey });
            });

            modelBuilder.Entity<AspNetUserRole>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.RoleId });
            });

            modelBuilder.Entity<AspNetUserToken>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.LoginProvider, e.Name });
            });

            modelBuilder.Entity<Feedback>(entity =>
            {
                entity.Property(e => e.Accept).HasDefaultValueSql("convert([bit],(0))");
            });

            modelBuilder.Entity<Mission>(entity =>
            {
                entity.Property(e => e.DailyLogin).HasDefaultValueSql("convert([bit],(0))");
            });

            modelBuilder.Entity<NovelNovelTag>(entity =>
            {
                entity.HasKey(e => new { e.NovelTagsTagId, e.NovelsNovelId });
            });

            modelBuilder.Entity<NovelViewIp>(entity =>
            {
                entity.HasKey(e => new { e.NovelsNovelId, e.ViewIpsId });
            });

            modelBuilder.Entity<NovelViewer>(entity =>
            {
                entity.HasKey(e => new { e.ProfileId, e.NovelId })
                    .IsClustered(false);

                entity.HasIndex(e => e.SeqNo, "IX_NovelViewer_SeqNo")
                    .IsUnique()
                    .IsClustered();

                entity.Property(e => e.SeqNo).ValueGeneratedOnAdd();

                entity.Property(e => e.ViewDate).HasDefaultValueSql("getdate()");

                entity.HasOne(d => d.Profile)
                    .WithMany(p => p.NovelViewers)
                    .HasForeignKey(d => d.ProfileId)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<Profile>(entity =>
            {
                entity.HasKey(e => e.ProfileId)
                    .IsClustered(false);

                entity.HasIndex(e => e.SeqNo, "IX_Profile_SeqNo")
                    .IsUnique()
                    .IsClustered();

                entity.Property(e => e.CanChangeUserName).HasDefaultValueSql("convert([bit],(0))");

                entity.Property(e => e.SeqNo).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<ProfileAchievement>(entity =>
            {
                entity.HasKey(e => new { e.ProfileId, e.AchievementId })
                    .IsClustered(false);

                entity.HasIndex(e => e.SeqNo, "IX_ProfileAchievement_SeqNo")
                    .IsUnique()
                    .IsClustered();

                entity.Property(e => e.AchieveDate).HasDefaultValueSql("getdate()");

                entity.Property(e => e.SeqNo).ValueGeneratedOnAdd();

                entity.HasOne(d => d.Achievement)
                    .WithMany(p => p.ProfileAchievements)
                    .HasForeignKey(d => d.AchievementId)
                    .HasConstraintName("FK_ProfileAchievement_Achievement_AchievementID");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}